name: Publish all libraries to NPM

on:
  workflow_dispatch:
    inputs:
      release_type:
        required: true
        description: Please select the type of release
        type: choice
        options:
          - major
          - minor
          - patch
          - premajor
          - preminor
          - prepatch
          - prerelease
        default: patch
      dryRun:
        description: 'Perform a dry run?'
        default: true
        type: boolean
jobs:
  dry-run:
    name: 'Perform a dry run to show the output'
    if: ${{ github.event.inputs.dryRun }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run a dry run Bump version
        run: |
          npx nx run-many -t version -p utils core events personalize --dryRun --skipProjectChangelog --verbose --trackDeps --releaseAs=${{inputs.release_type}} --preid=rc --skipRootChangelog --skipCommit --baseBranch master

  bump-and-build:
    name: 'Build new package versions'
    if: ${{ !github.event.inputs.dryRun }}
    runs-on: ubuntu-latest
    outputs:
      new_release_number: ${{ steps.get-version.outputs.new_release_number }}
      new_release_version: ${{ steps.get-version.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Git config
        run: |
          git config user.email builds@sitecore.com
          git config user.name "Automated Build"

      - name: Clean CHANGELOG.md files
        run: |
          packages=("events" "personalize" "utils" "core")
          for package in "${packages[@]}"; do
              file_path="./packages/$package/CHANGELOG.md"
              if [ -e $file_path ]; then
                  >"$file_path"
              fi
          done

      - name: Bump version
        run: npx nx run-many -t version -p utils core events personalize --trackDeps --releaseAs=${{inputs.release_type}} --preid=rc --skipRootChangelog --skipCommit --baseBranch master

      - name: Get new release version
        id: get-version
        run: |
          cd packages/events
          echo "new_release_number=$(npm pkg get version  | jq -r '.[]')" >> $GITHUB_OUTPUT
          echo "new_release_version=v.$(npm pkg get version  | jq -r '.[]')" >> $GITHUB_OUTPUT

      - name: Create a new branch
        run: |
          git stash
          git checkout -b release/${{steps.get-version.outputs.new_release_version}}
          git stash pop

      - name: Commit to branch
        run: |
          git commit -a -m "chore: Bumping package.json to new version: ${{steps.get-version.outputs.new_release_version}} [skip ci]"

      - name: Push to branch
        run: git push --set-upstream origin release/${{steps.get-version.outputs.new_release_version}}

      - name: Create release
        run: |
          for crt_tag in $(git tag -l '*-${{steps.get-version.outputs.new_release_number}}')
          do
            package=$(cut -d'-' -f1 <<<$crt_tag)
            gh release create $crt_tag --target release/${{steps.get-version.outputs.new_release_version}} --notes "$crt_tag release" --title "Release for library $crt_tag" --notes-file="./packages/$package/CHANGELOG.md"
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create pull request
        run: gh pr create --title "Update libraries to ${{inputs.release_type}} version ${{steps.get-version.outputs.new_release_version}}" --body "[skip ci]" --head release/${{steps.get-version.outputs.new_release_version}}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build NPM packages
        run: npx nx run-many -t build -p 'events,personalize'

      - name: Upload NPM package artifact
        uses: actions/upload-artifact@v3
        with:
          name: engage-packages
          path: packages/*

  publish-npm-packages:
    name: 'Publish packages to NPM registry'
    if: ${{ !github.event.inputs.dryRun }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package-folder: [utils, core, events, personalize]
    needs: bump-and-build
    steps:
      - name: Download package artifact
        uses: actions/download-artifact@v3
        with:
          name: engage-packages

      - name: Get release tag
        id: get-tag
        run: |
          ${{ contains(fromJSON('["prerelease", "premajor", "preminor", "prepatch"]'), inputs.release_type) }} && echo "release-tag=canary" >> $GITHUB_OUTPUT || echo "release-tag=latest" >> $GITHUB_OUTPUT
      - name: Create npm token file
        run: echo //registry.npmjs.org/:_authToken=${{secrets.NPMJS_PUBLISH_TOKEN}} > .npmrc

      - name: Publish to NPM
        uses: JS-DevTools/npm-publish@v1
        id: npm-publish
        with:
          token: ${{ secrets.NPMJS_PUBLISH_TOKEN }}
          tag: ${{ env.release-tag }}
          registry: https://registry.npmjs.org/
          access: public
          package: ./${{matrix.package-folder}}/package.json
        env:
          release-tag: ${{steps.get-tag.outputs.release-tag}}

      - name: Fail the workflow when unsuccessful publish
        if: steps.npm-publish.outputs.type == 'none'
        run: exit 1

      - name: Show the result
        run: echo "Version changed ${{ steps.npm-publish.outputs.old-version }} => ${{ steps.npm-publish.outputs.version }}"

  cleanup-github:
    name: Clean up git tags and PRs
    runs-on: ubuntu-latest
    needs: [bump-and-build, publish-npm-packages]
    if: failure() && (needs.publish-npm-packages.result == 'failure') && (!github.event.inputs.dryRun)
    env:
      new_release_version: ${{ needs.bump-and-build.outputs.new_release_version }}
      new_release_number: ${{ needs.bump-and-build.outputs.new_release_number}}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: 'release/${{env.new_release_version}}'
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup GitHub releases
        run: |
          for crt_tag in $(git tag -l '*-${{env.new_release_number}}')
          do
            gh release delete $crt_tag -y --cleanup-tag
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Close PR
        run: gh pr close release/${{env.new_release_version}} -d
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
