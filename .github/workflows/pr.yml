name: Pull Request

on:
  pull_request:
    branches: ['main']
    types: [edited, opened, reopened, synchronize]
  workflow_dispatch:

jobs:
  lint-and-build:
    strategy:
      matrix:
        node: [18, 20]
      fail-fast: true
    runs-on: ubuntu-latest
    name: Lint & Build on Node v${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - run: npm ci
      - name: Install Dependencies
        run: npm ci
      - name: Build Packages
        run: npx nx affected --target=build --base=remotes/origin/master --head=HEAD
      - name: Run Linting
        run: npx nx affected --target=lint --base=remotes/origin/master --head=HEAD
  unit-test:
    runs-on: ubuntu-latest
    name: Run unit tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - run: npm ci
      - name: Run Test
        run: npx nx affected --target=test --base=remotes/origin/master --head=HEAD
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
      - run: npm ci
      - name: Create affected packages matrix
        id: set-matrix
        run: echo "matrix=$(npx nx show projects --affected --with-target stryker --base=remotes/origin/master --head=HEAD | sed 's/\/$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  add-label:
    name: Create labels based on commits
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Add the labels
        run: |
          before_ref="${{ github.event.before }}"
          after_ref="${{ github.event.after }}"

          readarray -t commits < <(git log --pretty=format:%s $before_ref...$after_ref)

          if [ "${#commits[@]}" -eq 0 ]; then
            readarray -t commits < <(git show -s --format=%s)
          fi

          for commit in "${commits[@]}"; do

            if [[ "$commit" != *":"* || "$commit" = "Merge branch"* || "$commit" = "CDK-"* ]]; then
              continue
            fi

            commit_info=$(cut -d':' -f1 <<<$commit)

            if [[ "$commit_info" =~ "!" ]]; then
              gh pr edit ${{ github.event.pull_request.number }} --add-label "BREAKING CHANGE"
              commit_info="${commit_info//!/}"
            fi
            
            if [[ "$commit_info" =~ "(" ]]; then
              type=$(cut -d'(' -f1 <<<$commit_info)
              gh pr edit ${{ github.event.pull_request.number }} --add-label "$type"
            else
              gh pr edit ${{ github.event.pull_request.number }} --add-label "$commit_info"
            fi
          done
  check-pr-title:
    name: Check if the PR title meets the conventional commit format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check the title format
        run: |
          pr_title_regex="^(build|chore|ci|docs|style|refactor|perf|test|revert|feat|fix)(\((core|utils|events|personalize|search)\))?!?: CDK-[0-9]+"
          if [[ "${{ github.event.pull_request.title }}" =~ $pr_title_regex ]]; then
            echo "The title is properly formated."
            exit 0
          else
            echo "The title is not properly formated."
            exit 1
          fi
  check-all-jobs:
    name: Check if all jobs run successfully
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-build, unit-test, check-pr-title]
    steps:
      - run: |
          if [[ "${{contains(needs.*.result, 'failure')}}" == 'true' ]]; then
            echo "Some step(s) failed to pass"
            exit 1
          else
            echo "All steps are successfully passed"
            exit 0
          fi
