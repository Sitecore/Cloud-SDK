name: Pull Request

on:
  pull_request:
    branches: ['master']
  workflow_dispatch:

jobs:
  lint-and-build:
    strategy:
      matrix:
        node: [18, 20]
      fail-fast: true
    runs-on: ubuntu-latest
    name: Lint & Build on Node v${{ matrix.node }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
      - run: npm ci
      - name: Install Dependencies
        run: npm ci
      - name: Run Linting
        run: npx nx affected --target=lint --base=remotes/origin/master --head=HEAD
      - name: Build Packages
        run: npx nx affected --target=build --base=remotes/origin/master --head=HEAD
  unit-test:
    runs-on: ubuntu-latest
    name: Run unit tests
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - run: npm ci
      - name: Run Test
        run: npx nx affected --target=test --base=remotes/origin/master --head=HEAD
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
      - run: npm ci
      - name: Create affected packages matrix
        id: set-matrix
        run: echo "matrix=$(npx nx show projects --affected --with-target stryker --base=remotes/origin/master --head=HEAD | sed 's/\/$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
  mutation-tests:
    needs: prepare-matrix
    if: needs.prepare-matrix.outputs.matrix != '[]'
    strategy:
      fail-fast: false
      matrix:
        mutation-package: ${{fromJson(needs.prepare-matrix.outputs.matrix)}}
    runs-on: ubuntu-latest
    name: Run mutation tests for ${{ matrix.mutation-package }} package
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
      - run: npm ci
      - name: Run Mutation Tests
        run: npx stryker run ./packages/${{ matrix.mutation-package }}/stryker.conf.js
  events-e2e-tests:
    name: Run Events E2E
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.get-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
      - run: npm ci
      - name: Get affected app
        id: get-affected
        run: echo "affected=$(npx nx show projects --affected --with-target engage-next-events --base=remotes/origin/master --head=HEAD | sed 's/\/$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - name: Run E2E Tests
        run: npx nx affected --target=engage-next-events --base=remotes/origin/master --head=HEAD
      - name: Generate Events E2E Test Report
        if: always() && steps.get-affected.outputs.affected != '[]'
        run: npm run generate-e2e-report
      - name: Upload Events E2E Test Report
        if: always()  && steps.get-affected.outputs.affected != '[]'
        uses: actions/upload-artifact@v4
        with:
          name: events-e2e-report
          path: apps/engage-e2e/cypress/results/
  personalize-e2e-tests:
    name: Run Personalize E2E
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.get-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
      - run: npm ci
      - name: Get affected app
        id: get-affected
        run: echo "affected=$(npx nx show projects --affected --with-target engage-next-personalize --base=remotes/origin/master --head=HEAD | sed 's/\/$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - name: Run E2E Tests
        run: npx nx affected --target=engage-next-personalize --base=remotes/origin/master --head=HEAD
      - name: Generate Personalize E2E Test Report
        if: always() && steps.get-affected.outputs.affected != '[]'
        run: npm run generate-e2e-report
      - name: Upload Personalize E2E Test Report
        if: always() && steps.get-affected.outputs.affected != '[]'
        uses: actions/upload-artifact@v4
        with:
          name: personalize-e2e-report
          path: apps/engage-e2e/cypress/results/
  search-api-client-e2e-tests:
    name: Run Search API Client E2E
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.get-affected.outputs.affected }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          cache: 'npm'
      - run: npm ci
      - name: Get affected app
        id: get-affected
        run: echo "affected=$(npx nx show projects --affected --with-target search-api-client-e2e --base=remotes/origin/master --head=HEAD | sed 's/\/$//' | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - name: Run E2E Tests
        run: npx nx affected --target=search-api-client-e2e --base=remotes/origin/master --head=HEAD
      - name: Generate Search API Client Test Report
        if: always() && steps.get-affected.outputs.affected != '[]'
        run: npm run generate-e2e-search-api-client-report
      - name: Upload Search API Client Test Report
        if: always() && steps.get-affected.outputs.affected != '[]'
        uses: actions/upload-artifact@v4
        with:
          name: search-api-client-e2e-report
          path: apps/search-api-client-e2e/cypress/results/
  add-label:
    name: Create labels based on commits
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Add the labels
        run: |
          before_ref="${{ github.event.before }}"
          after_ref="${{ github.event.after }}"

          readarray -t commits < <(git log --pretty=format:%s $before_ref...$after_ref)

          if [ "${#commits[@]}" -eq 0 ]; then
            readarray -t commits < <(git show -s --format=%s)
          fi

          for commit in "${commits[@]}"; do

            if [[ "$commit" != *":"* || "$commit" = "Merge branch"* || "$commit" = "CDK-"* ]]; then
              continue
            fi

            commit_info=$(cut -d':' -f1 <<<$commit)

            if [[ "$commit_info" =~ "!" ]]; then
              gh pr edit ${{ github.event.pull_request.number }} --add-label "BREAKING CHANGE"
              commit_info="${commit_info//!/}"
            fi
            
            if [[ "$commit_info" =~ "(" ]]; then
              type=$(cut -d'(' -f1 <<<$commit_info)
              gh pr edit ${{ github.event.pull_request.number }} --add-label "$type"
            else
              gh pr edit ${{ github.event.pull_request.number }} --add-label "$commit_info"
            fi
          done
  check-all-jobs:
    name: Check if all jobs run successfully
    runs-on: ubuntu-latest
    if: always()
    needs:
      [lint-and-build, unit-test, mutation-tests, events-e2e-tests, personalize-e2e-tests, search-api-client-e2e-tests]
    steps:
      - run: |
          if [[ "${{contains(needs.*.result, 'failure')}}" == 'true' ]]; then
            echo "Some step(s) failed to pass"
            exit 1
          else
            echo "All steps are successfully passed"
            exit 0
          fi
